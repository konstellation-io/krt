name: Test KRT Library

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    paths:
      - '**/*'
      - '.github/workflows/test-krt.yaml'

jobs:
  build:
    name: Linting and Unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.20.x
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: ./
          args: --timeout=5m
      - name: Run unit tests
        run: go test ./... -cover -v -coverpkg=./... -coverprofile=coverage-unit.out --tags=unit
        working-directory: ./
      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: ./coverage-unit.out

  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Download code coverage results
        uses: actions/download-artifact@v3
        with:
          name: coverage-report
          path: ./
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          projectBaseDir: ./
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_KRT }}

  goreleaser:
    name: Release
    runs-on: ubuntu-latest
    needs:
      - build
      - sonarcloud
    if: github.ref_name == 'main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20.x'
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
